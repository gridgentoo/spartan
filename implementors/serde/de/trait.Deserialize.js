(function() {var implementors = {};
implementors["spartan"] = [{"text":"impl&lt;'de, 'msg&gt; Deserialize&lt;'de&gt; for Event&lt;'msg&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for ReplicationStorage","synthetic":false,"types":[]},{"text":"impl&lt;'de, 'c, 'r&gt; Deserialize&lt;'de&gt; for PrimaryRequest&lt;'c, 'r&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, 'c&gt; Deserialize&lt;'de&gt; for ReplicaRequest&lt;'c&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, 'c, 'r&gt; Deserialize&lt;'de&gt; for Request&lt;'c, 'r&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for PrimaryStorage","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for ReplicaStorage","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for DeleteRequest","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for PushRequest","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for RequeueRequest","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Key","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Primary","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Replica","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Replication","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for ReplicationConfig","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Persistence","synthetic":false,"types":[]},{"text":"impl&lt;'de, 'a&gt; Deserialize&lt;'de&gt; for PersistenceConfig&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, 'a&gt; Deserialize&lt;'de&gt; for Config&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["spartan_lib"] = [{"text":"impl&lt;'de, M&gt; Deserialize&lt;'de&gt; for TreeDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Identifiable + Sortable,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Identifiable&gt;::Id: Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Identifiable&gt;::Id: Serialize + DeserializeOwned,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Sortable&gt;::Sort: Serialize + DeserializeOwned,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Serialize + DeserializeOwned,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'de, M&gt; Deserialize&lt;'de&gt; for VecDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Deserialize&lt;'de&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Timeout","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Offset","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Time","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Status","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for State","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Message","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
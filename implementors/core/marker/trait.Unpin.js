(function() {var implementors = {};
implementors["spartan"] = [{"text":"impl Unpin for ResponseError","synthetic":true,"types":[]},{"text":"impl Unpin for QueueError","synthetic":true,"types":[]},{"text":"impl Unpin for StartCommandError","synthetic":true,"types":[]},{"text":"impl Unpin for StartCommand","synthetic":true,"types":[]},{"text":"impl Unpin for InitCommandError","synthetic":true,"types":[]},{"text":"impl Unpin for InitCommand","synthetic":true,"types":[]},{"text":"impl Unpin for ReplicaCommand","synthetic":true,"types":[]},{"text":"impl Unpin for Command","synthetic":true,"types":[]},{"text":"impl Unpin for Server","synthetic":true,"types":[]},{"text":"impl Unpin for ManagerError","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for Manager&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; Unpin for Queue&lt;DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for Log&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PersistMode","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for Snapshot&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PersistenceError","synthetic":true,"types":[]},{"text":"impl&lt;'msg&gt; Unpin for Event&lt;'msg&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ReplicationStorage","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; Unpin for PrimaryRequest&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for ReplicaRequest&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; Unpin for Request&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PrimaryError","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Unpin for RecvIndex&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Unpin for BatchAskIndex&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Unpin for Sync&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Stream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for StreamPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PrimaryStorage","synthetic":true,"types":[]},{"text":"impl Unpin for ReplicaError","synthetic":true,"types":[]},{"text":"impl Unpin for ReplicaStorage","synthetic":true,"types":[]},{"text":"impl&lt;'m, 'c, T&gt; Unpin for ReplicaSocket&lt;'m, 'c, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;'c: 'm,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c, S&gt; Unpin for Node&lt;'c, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Unpin for DeleteResponse","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; Unpin for Timeout&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; Unpin for Time&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; Unpin for PopResponse&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for PushRequest","synthetic":true,"types":[]},{"text":"impl Unpin for RequeueRequest","synthetic":true,"types":[]},{"text":"impl Unpin for SizeResponse","synthetic":true,"types":[]},{"text":"impl Unpin for ServerError","synthetic":true,"types":[]},{"text":"impl Unpin for AccessError","synthetic":true,"types":[]},{"text":"impl Unpin for AccessMiddleware","synthetic":true,"types":[]},{"text":"impl Unpin for Key","synthetic":true,"types":[]},{"text":"impl Unpin for Primary","synthetic":true,"types":[]},{"text":"impl Unpin for Replica","synthetic":true,"types":[]},{"text":"impl Unpin for Replication","synthetic":true,"types":[]},{"text":"impl Unpin for ReplicationConfig","synthetic":true,"types":[]},{"text":"impl Unpin for Persistence","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PersistenceConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BincodeCodec","synthetic":true,"types":[]}];
implementors["spartan_lib"] = [{"text":"impl&lt;M&gt; Unpin for TreeDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Identifiable&gt;::Id: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Unpin for VecDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BuilderError","synthetic":true,"types":[]},{"text":"impl Unpin for MessageBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Timeout","synthetic":true,"types":[]},{"text":"impl Unpin for Offset","synthetic":true,"types":[]},{"text":"impl Unpin for Time","synthetic":true,"types":[]},{"text":"impl Unpin for Status","synthetic":true,"types":[]},{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for Message","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
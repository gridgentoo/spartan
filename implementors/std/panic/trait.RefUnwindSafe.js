(function() {var implementors = {};
implementors["spartan"] = [{"text":"impl RefUnwindSafe for ResponseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StartCommandError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartCommand","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InitCommandError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ManagerError","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; !RefUnwindSafe for Manager&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; !RefUnwindSafe for Queue&lt;DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for Log&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PersistMode","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for Snapshot&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PersistenceError","synthetic":true,"types":[]},{"text":"impl&lt;'msg&gt; RefUnwindSafe for Event&lt;'msg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationStorage","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; RefUnwindSafe for PrimaryRequest&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for ReplicaRequest&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; RefUnwindSafe for Request&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrimaryError","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; RefUnwindSafe for RecvIndex&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; RefUnwindSafe for BatchAskIndex&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; RefUnwindSafe for Sync&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StreamPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimaryStorage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReplicaError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaStorage","synthetic":true,"types":[]},{"text":"impl&lt;'m, 'c, T&gt; !RefUnwindSafe for ReplicaSocket&lt;'m, 'c, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for Node&lt;'c, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; RefUnwindSafe for Timeout&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; RefUnwindSafe for Time&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; RefUnwindSafe for PopResponse&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessMiddleware","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Replica","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Replication","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Persistence","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PersistenceConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BincodeCodec","synthetic":true,"types":[]}];
implementors["spartan_lib"] = [{"text":"impl&lt;M&gt; RefUnwindSafe for TreeDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Identifiable&gt;::Id: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Sortable&gt;::Sort: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for VecDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuilderError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
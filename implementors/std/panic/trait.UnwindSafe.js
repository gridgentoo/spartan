(function() {var implementors = {};
implementors["spartan"] = [{"text":"impl UnwindSafe for ResponseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StartCommandError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartCommand","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InitCommandError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ManagerError","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; UnwindSafe for Manager&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; UnwindSafe for Queue&lt;DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; UnwindSafe for Log&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PersistMode","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; UnwindSafe for Snapshot&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PersistenceError","synthetic":true,"types":[]},{"text":"impl&lt;'msg&gt; UnwindSafe for Event&lt;'msg&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationStorage","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; UnwindSafe for PrimaryRequest&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; UnwindSafe for ReplicaRequest&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'r&gt; UnwindSafe for Request&lt;'c, 'r&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PrimaryError","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; !UnwindSafe for RecvIndex&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; !UnwindSafe for BatchAskIndex&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; !UnwindSafe for Sync&lt;'s, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StreamPool&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimaryStorage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReplicaError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaStorage","synthetic":true,"types":[]},{"text":"impl&lt;'m, 'c, T&gt; !UnwindSafe for ReplicaSocket&lt;'m, 'c, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, S&gt; UnwindSafe for Node&lt;'c, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; UnwindSafe for Timeout&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; UnwindSafe for Time&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'m&gt; UnwindSafe for PopResponse&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PushRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeResponse","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessMiddleware","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Replica","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Replication","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Persistence","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PersistenceConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BincodeCodec","synthetic":true,"types":[]}];
implementors["spartan_lib"] = [{"text":"impl&lt;M&gt; UnwindSafe for TreeDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Identifiable&gt;::Id: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Sortable&gt;::Sort: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; UnwindSafe for VecDatabase&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuilderError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Offset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()